主函数Mine（行数，列数，雷数）：用来存储数据，tr存行数，td存列数，squares以二维数组的形式存储每一格的信息[tr,td]，surplusMine存储剩余雷数，allRight用作小红旗是否全部正确标中雷的判断标志，初始为false

需要解决的几个逻辑
1.99个雷怎么做到是在28行28列中随机分布的
  创建一个长度为tr*td（784）的空数组square（对应每一个小格子），遍历将1-784填入square数组中，然后用sort、Math.random将784个数字乱序，再用slice(0,99)选中乱序后排在前九十九位的数字，选中结果放在randomNum里面，注意此时randomNum是一个含有99个随机数的数组，这样就做到28行28列中有随机分布的99个雷，之后用变量rn来接收randomNum，rn此时就是一个含有九十九个数字的数组.

2.拿到99个雷的数组之后，此时数组里的都是0-784的任一数据，怎么知道这个雷在表格的第几行第几列，换句话说，把rn从一维数组转化为二维数组
   把n放在一个i28*j28的循环中来做索引（循环多少次n就为多少，最终变为784），用n跟rn里面的九十九个数字逐一匹配，匹配用rn.indexOf(n)如果匹配就返回n在rn中的位置，不成功则为-1，所以当rn.indexOf(++n) != -1时就说明n是rn里面的值，那么回到本次匹配成功下的循环，此时的i,j值就是雷。ij对调就能得出雷所在的坐标，再将squares变成了含有多个对象的数组（每个对面含有三或四个属性：雷类型，横坐标，纵坐标或者数字类型，横坐标，纵坐标，数值）

3.怎么创建雷盘的
    创建元素table，拿到传入的参数tr，td，用内外循环的方式在页面中逐一生成td,tr元素（28tr*28td）,并为domTd绑上坐标属性pos,然后将Td插入到Tr中，Tr插入到table上，table插入到gamebox上，就实现了在页面中自动创建雷盘的效果，另外，为了防止多次点击创建多个雷盘，务必要在table插入gamebox之前就让gamebox的innerHTML为空。最后，每次点击td，都应该触发创建雷盘事件，每次点击之后获得的都是一个更新后的雷盘

4.怎么知道数字所在的九宫格有多少雷，从而使数字与雷数想匹配
    遍历每一个td,当遍历的td放的是雷的话，就获取雷周围的数字,这里用一个getAround（square)函数来实现，让雷遍历周围的八个方格（其中排除掉上下左右边界和雷的情况），获得雷周围数组，结果放入result中并返回出去赋值给num，所以num是一个存储了99个雷周围数字所在坐标（j,i）的三维数组，99*（0-8）*2，num[k][0]就是数字的横坐标，num[k][1]就是数字的纵坐标（k取值1到99），然后遍历到相同坐标就算1，有重复就在这基础上再加1

5.怎么把点击的地方与格子的坐标一一对应起来
   在双层ij循环中用var domTd = document.createElement('td');domTd.pos=[i,j]将格子对应的行列绑定到pos身上,最终domTd.pos就是一个从[0,0]到[27,27]的长度为28*28的数组

6.怎么做到数字跟颜色匹配的，为数字1添加红色，为数字2添加绿色
   1）首先创建了八个数字样式，命名为zero-eight
   2）然后创建一个数组，里面的八项也分别是zero-eight
   3）之后获得点击处的数字 obj.className = cl[curSquare.value]，这样就做到当点击的是数字1时，也即是curSquare.value=1，对应数组第二项1（第一项是0）one。这样就把one传给了className，然后className=one就可以找到样式表中one的样式，其他以此类推
   4）简单来说，就是把点击处的数字作为数组的索引找对对应的英文数字，再把英文数字赋给className，className根据这个英文数字去寻找相应样式

7.怎么做到点击0之后成片出现
   首先0周围必定没有雷，要么是数字0要么是其他数字，成片出现的基础是点击0之后，0周围还有0，如果0周围刚好全都是数字，也只会显示当前0周围的8个数字
  1）先将0设为不显示 obj.innerHTML = ''
  2）找出点击处周围所有的格子（必定不包含雷），如果是数字就直接显示，是零的话就重新执行本次过程，也就是递归，直到周围都是除0外的数字
  3）递归过程必定存在遍历周围格子时找到已经遍历过的格子，所以需要设置一个check，将已经遍历过的check设置true，遍历过程只查找check不为true的情况，这样就避免了死循环（你找你周围的时候找到我，我找我周围的时候又找到你）
   
8.右键点击事件标小红旗
  1）右键点击，如果有小红旗就清除，没有小红旗就加上，用一个三目运算符为className里面的flag取反
  2）右键产生小红旗就使剩余雷是surplusMine--，取消小红旗就让剩余雷数++
  3)当剩余雷数为0且所有小红旗都对应雷的时候，显示成功，否则失败，并同时禁用鼠标在雷区的按下事件

9.游戏失败
  遍历雷区每个格子，判定每个格子的类型并相应显示，同时被点击导致爆炸的雷格子底色变化
   
整个过程：
1.循环tr、td（28*28）生成一个tr*td的数组，乱序之后截取前九十九个，相当于在tr*td的雷盘中随机放入九十九个雷，此时得出的是一个含有0-784中任一不重复整数的长度为九十九的一维数组rn

2.用ij做嵌套循环，n做索引，每次循环n就加1，当n与rn中的数值相同时，则此时的ij就与雷所在的坐标相关，这样就将雷一维的数组与雷的二维坐标建立起了联系，以后通过i,j就可以判断该处是数字还是雷，并将type、x、y这三个属性赋值给squares,以后通过squares就可以查到某个方格的对应信息,squares类似于这样的形式,type为mine的没有value属性，为number的现在还都是0
 [
   [{type:"number",x:0,y:0,value:0}{type:"mine",x:1,y:0}...{type:"mine",x:27,y:0}]
   [{type:"number",x:0,y:1,value:0}{type:"mine",x:1,y:1}...{type:"mine",x:27,y:1}]
   ...
   [{type:"number",x:0,y:27,value:0}{type:"mine",x:1,y:27}...{type:"mine",x:27,y:27}]
 ]
 
 实例 ： rn[4,45,76,234,894,322,88,28,12,67...]
       i
   j   1   6    11   16
       2   7    12   17
       3   8    13   18
       4   9    14   19
       5   10   15   20 
      如上所示，n循环后不断自增，从1自增到784，当n为4时，在rn中找到了索引，说明4所在的坐标是雷，也就是说，坐标系中（0,3）所对应的是雷，以此类推，当n不断自增时，会与rn匹配九十九次，相应的就能在雷盘中产生99个雷

3.以雷为中心找到周围不是雷的所有格子，不是雷周围的数字必定是0不需要更新，我们只需要更新雷周围的数字，具体做法是循环九十九个雷各自周围的非雷格子，之前value为0，现在坐标在循环过程出现一次就加一，再出现一次再加一，以此类推，每个数字格子（除0外）都能保证自己被周边的每个雷循环到，周围有多少个雷就会被循环到多少次，至此就完成了雷区的初始化

4.当玩家开始点击雷区之后，就需要判断玩家所点击的是雷还是数字，数字的话要分为0和非0的情况，如果非0的话就直接把点击的地方的domTd显示出来就行，0的话要遍历周围的的格子，如果还有0的话就需要继续递归遍历，直到周围的格子都非0，但是要注意到，第一个0遍历周围格子遍历到第二个0时导致第二个0开启对周围格子的遍历，那么第二个0周围必然有第一个0（两个0都在彼此的九宫格内），所以为了跳出这种死循环，需要给被遍历的格子加上一个check属性，当被遍历后格子的check属性就变为true,以后就都不会被遍历到

5.当玩家点击的是雷，游戏失败，那么就会发生三件事情，第一要显示整个雷区所有的雷，第二要取消雷区的点击事件，第三给点中的雷标红

for (var i = 0; i < this.tr; i++) {
                    for (var j = 0; j < this.td; j++) {
                        if (this.squares[obj.pos[0]][obj.pos[1]].type == 'mine') {
                            if (this.squares[obj.pos[0]][obj.pos[1]].className !== 'flag') {
                                break;
                            } else {
                                this.allRight = true;
                            }
                        }
                    }
}
